using System;
using UnityEngine;
namespace level1
{
    public class Eyefly : MonoBehaviour
    {
        [Header("Di chuy·ªÉn")]

        [SerializeField] private float startingHealth;
        private float currentHealth { get; set; }
        private bool isDead = false;
        public float walkSpeed = 2f;      // T·ªëc ƒë·ªô di chuy·ªÉn c·ªßa enemy
        public float leftDistance = 3f;   // Kho·∫£ng c√°ch t·ªëi ƒëa di chuy·ªÉn sang tr√°i
        public float rightDistance = 3f;
        private bool isHurt = false;  // Kho·∫£ng c√°ch t·ªëi ƒëa di chuy·ªÉn sang ph·∫£i

        [Header("Ground Check")]
        public Transform groundCheckEnemy;


        private Animator animator;
        private Rigidbody2D rb;
        private bool movingRight = true;
        private bool isAttacking = false;

        private float leftLimit;
        private float rightLimit;

        public DetectingZone AttackZone;
        private Transform player;
        public GameObject attackHitbox;

        private bool hasTarget = false;
        private Audio audio;
        private bool hurt = false;

        public bool HasTarget
        {
            get { return hasTarget; }
            private set
            {
                if (hasTarget != value)
                {
                    hasTarget = value;
                    animator.SetBool("hasTarget", hasTarget);

                }
            }
        }

        void Start()
        {
            rb = GetComponent<Rigidbody2D>();
            animator = GetComponent<Animator>();
            player = GameObject.FindGameObjectWithTag("Player").transform;
            currentHealth = startingHealth;
            leftLimit = transform.position.x - leftDistance;
            rightLimit = transform.position.x + rightDistance;
            audio = FindAnyObjectByType<Audio>();

            attackHitbox.SetActive(false);

        }

        void Update()
        {
            if (isHurt || isDead) return;
            HasTarget = AttackZone.detectedColliders.Exists(c => c.CompareTag("Player"));

            if (HasTarget && !isAttacking)
            {
                Attack();
            }
        }

        void FixedUpdate()
        {
            if (isHurt || isDead) return;

            if (isAttacking || HasTarget) return; // N·∫øu ƒëang t·∫•n c√¥ng ho·∫∑c c√≥ m·ª•c ti√™u, kh√¥ng di chuy·ªÉn

            Move();
        }

        void Move()
        {
            if (!hasTarget)
            {
                Vector2 currentPos = transform.position;

                if (movingRight)
                {
                    rb.linearVelocity = new Vector2(walkSpeed, rb.linearVelocity.y);
                    if (currentPos.x >= rightLimit)
                    {
                        movingRight = false;
                        Flip();
                    }
                }
                else
                {
                    rb.linearVelocity = new Vector2(-walkSpeed, rb.linearVelocity.y);
                    if (currentPos.x <= leftLimit)
                    {
                        movingRight = true;
                        Flip();
                    }
                }
            }
        }

        void Attack()
        {
            if (isAttacking || isHurt) return;

            isAttacking = true;
            animator.SetBool("isAttack", true);

            // D·ª´ng di chuy·ªÉn
            rb.linearVelocity = Vector2.zero;

            // B·∫≠t hitbox khi animation b·∫Øt ƒë·∫ßu
            // Invoke("EnableHitbox", 1f); // Ch·ªù 0.2s tr∆∞·ªõc khi b·∫≠t hitbox ƒë·ªÉ kh·ªõp v·ªõi animation

        }
        private void AttackAudio()
        {
            audio.PlayMonsterBite();
        }
        private void DeadAudio()
        {
            audio.PlayMonsterDead();
        }

        void ResetAttack()
        {
            isAttacking = false;
            animator.SetBool("isAttack", false);
            Move();


        }
        private void TouchEnemy()
        {
            audio.AttackOnEnemy();
        }

        void Flip()
        {
            Vector3 scale = transform.localScale;
            scale.x *= -1;
            transform.localScale = scale;
        }

        // üëâ Khi animation b·∫Øt ƒë·∫ßu, m·ªü hitbox
        public void EnableHitbox()
        {
            attackHitbox.SetActive(true);

        }

        // üëâ Khi animation k·∫øt th√∫c, ƒë√≥ng hitbox
        public void DisableHitbox()
        {
            attackHitbox.SetActive(false);
        }

        public void TakeDamage(float _damage)
        {
            if (isDead || isHurt) return;
            currentHealth = Mathf.Clamp(currentHealth - _damage, 0, startingHealth);
            walkSpeed = 2f;

            if (currentHealth > 0)
            {
                isHurt = true; // ƒê√°nh d·∫•u l√† ƒëang b·ªã th∆∞∆°ng

                animator.SetTrigger("isHurt");
                CancelAttack();

                // G·ªçi h√†m ResetHurt sau 0.5s ƒë·ªÉ k·∫øt th√∫c tr·∫°ng th√°i b·ªã th∆∞∆°ng
                Invoke(nameof(ResetHurt), 0.5f);
            }
            else
            {

                Die();
            }
        }
        void ResetHurt()
        {
            isHurt = false;
        }

        void CancelAttack()
        {
            isAttacking = false;
            animator.SetBool("isAttack", false);
            walkSpeed = 2f;
        }



        private void Die()
        {
            if (isDead) return;
            animator.SetTrigger("isHurt");
            isDead = true;
            animator.SetBool("isDead", true);
            rb.gravityScale = 0;// TƒÉng tr·ªçng l·ª±c ƒë·ªÉ r∆°i nhanh h∆°n

            // Kh√¥ng t·∫Øt Collider ngay l·∫≠p t·ª©c, ch·ªâ t·∫Øt trigger n·∫øu c√≥
            Collider2D col = GetComponent<Collider2D>();
            if (col != null) col.isTrigger = false;

            rb.linearVelocity = Vector2.zero; // D·ª´ng m·ªçi chuy·ªÉn ƒë·ªông tr∆∞·ªõc ƒë√≥
        }

        // Khi va ch·∫°m v·ªõi m·∫∑t ƒë·∫•t, enemy s·∫Ω b·ªã v√¥ hi·ªáu h√≥a ho√†n to√†n
        private void OnCollisionEnter2D(Collision2D collision)
        {
            if (isDead && collision.gameObject.layer == LayerMask.NameToLayer("Ground"))
            {
                rb.simulated = false; // D·ª´ng v·∫≠t l√Ω
            }
        }
        private void EnableGravity()
        {
            rb.gravityScale = 2;
        }


    }
}